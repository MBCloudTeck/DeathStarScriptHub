function Invoke-PALExploitableRules
{
<#
.SYNOPSIS

Gets AppLocker rules that potentially can be exploited.

Author: @oddvarmoe
License: BSD 3-Clause
Required Dependencies: Get-PALRules, Get-PALRulesStatus, Get-PALWriteableAllowedPaths
Optional Dependencies: None

.DESCRIPTION

Checking AppLocker rules and looks for known weaknesses in configuration that can be exploited.

.EXAMPLE

PS C:\> Get-PALExploitableRules

[*] Checking for Exploitable AppLocker rules - be patient
    #######################
    #GENERAL CONFIGURATION#
    #######################

[*] Checking rule collection status
[+] Appx is not enforced. Have fun!
[+] Dll is not enforced. Have fun!

[*] Checking PowerShell version 2 status
[+] Powershell version 2 is enabled
[+] Start Powershell with command: powershell -version 2

    #######################
    # PUBLISHER RULES     #
    #######################
[+] Found * Publisher Rules that can potentially be exploited:

ParentName PublisherName Productname BinaryName
---------- ------------- ----------- ----------
Appx       *             *           *         
Msi        *             *           *         



    #######################
    # PATH RULES          #
    #######################
[*] Checking for missing ADS rules
[+] These writeable allowed paths does not block ADS and can be exploited:

Name   Path                                                
----   ----                                                
Exe    C:\Windows\Registration\CRMLog                      
Exe    C:\Windows\System32\FxsTmp                          
Exe    C:\Windows\System32\com\dmp                         
Exe    C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys
Exe    C:\Windows\SysWOW64\FxsTmp                          
Exe    C:\Windows\SysWOW64\Tasks                           
Exe    C:\Windows\SysWOW64\com\dmp                         
Script C:\Windows\Tasks                                    
Script C:\Windows\Temp                                     
Script C:\Windows\tracing                                  
Script C:\Windows\System32\FxsTmp                          
Script C:\Windows\System32\Tasks                           
Script C:\Windows\System32\com\dmp                         
Script C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys


[*] Checking if there are exploitable allowed path rules that user can write to

[*] Checking for missing files and folders that has allow rules
[+] Missing allowed paths found that can potentially be exploited:

Name   Path                                                                                                                      
----   ----                                                                                                                      
Exe    C:\WINLINK\WINLINK.EXE                                                                                                 
Exe    C:\USERS\*\APPDATA\LOCAL\CITRIX\ICA CLIENT\WFICA32.EXE                                                                    
Exe    C:\SOFTWARE32\IMPORT.exe
Exe    C:\USERS\*\APPDATA\LOCAL\CITRIX\ICA CLIENT\RECEIVER\RECEIVER.EXE                                                          
Script C:\USERS\PUBLIC\DESKTOP\SAPSTART.BAT                                                                              
Script C:\Software32\SHIP.BAT                                                                                        

[*] Checking for potential CLM bypass
[+] 14 potential paths found that can be used for CLM bypass
[+] Use Invoke-PALCLMTempBypass to attempt to launch a full language mode PowerShell session
Script C:\Windows\Tasks                                                                                                          
Script C:\Windows\Temp                                                                                                           
Script C:\Windows\tracing                                                                                                        
Script C:\Windows\Registration\CRMLog                                                                                            
Script C:\Windows\System32\FxsTmp                                                                                                
Script C:\Windows\System32\Tasks                                                                                                 
Script C:\Windows\System32\com\dmp                                                                                               
Script C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys                                                                      
Script C:\Windows\System32\spool\PRINTERS                                                                                        
Script C:\Windows\System32\spool\SERVERS                                                                                         
Script C:\Windows\System32\spool\drivers\color                                                                                   
Script C:\Windows\SysWOW64\FxsTmp                                                                                                
Script C:\Windows\SysWOW64\Tasks                                                                                                 
Script C:\Windows\SysWOW64\com\dmp                                                                                               

    #######################
    # HASH RULES          #
    #######################
[-] Did not find any hash deny rules
#>
# Function Version: 0.96    
    [CmdletBinding()] Param (
        [String]$OfflineXML
    )
    Process
    {
        Try
        {
            
            If($OfflineXML)
            {
                "`n[*] Checking for Exploitable AppLocker rules from Offline XML"
                $PublisherRules = Get-PALRulesNative -OutputRules Publisher -RuleActions Allow -OfflineXML $OfflineXML
                $DenyPathRules = Get-PALRulesNative -OutputRules Path -RuleActions Deny -OfflineXML $OfflineXML
                $DenyHashRules = Get-PALRulesNative -OutputRules Hash -RuleActions Deny -OfflineXML $OfflineXML
                $AllowPathRules = Get-PALRulesNative -OutputRules Path -RuleActions Allow -OfflineXML $OfflineXML
            }
            else
            {
                "`n[*] Checking for Exploitable AppLocker rules - be patient"
                $PublisherRules = Get-PALRules -OutputRules Publisher -RuleActions Allow
                $DenyPathRules = Get-PALRules -OutputRules Path -RuleActions Deny -ExceptionsAsDeny
                $DenyHashRules = Get-PALRules -OutputRules Hash -RuleActions Deny
                $AllowPathRules = Get-PALRules -OutputRules Path -RuleActions Allow
                #Need this due to a bug
                Get-PALWriteableAllowedPaths | Out-Null
            }

            #Check if some of the rule collections is not configured
            "    #######################"
            "    #GENERAL CONFIGURATION#"
            "    #######################"
            "`n[*] Checking rule collection status"
            $RulesStatus = Get-PALRuleSectionStatus
            foreach($Ruless in $RulesStatus)
            {
                if($Ruless.status -ne "Enforced")
                {
                    "[+] $($Ruless.Name) is not enforced. Have fun!"
                }
            }

            #Check if Powershell v2 is allowed or not!
            "`n[*] Checking PowerShell version 2 status"
            $Posh2Enabled = Get-PALPoshV2Installed
            if($Posh2Enabled -eq "True")
            {
                "[+] Powershell version 2 is enabled"
                "[+] Start Powershell with command: powershell -version 2"
            }
            else
            {
                "[-] Found that Powershell version 2 is disabled"
            }
            


            $ExploitablePublisherRules = @()
            "`n    #######################"
            "    # PUBLISHER RULES     #"
            "    #######################"
            
            ## All signed binaries rule
            if($PublisherRules)
            {
                ForEach($PubSection in $PublisherRules)
                {
                    Foreach($PubRule in $PubSection.RulesList)
                    {
                        if($PubRule.Publishername -eq "*")
                        {
                            write-verbose "[+] Trust all signed rule found in $($pubSection.name)"
                            write-verbose "[+] Get yourself a code signing cert and start a party!"
                            $ExploitablePublisherRules += $PubRule
                        }
                    }
                }

                if($ExploitablePublisherRules)
                {
                    "[+] Found * Publisher Rules that can potentially be exploited:"
                    $ExploitablePublisherRules | Select-Object ParentName,PublisherName,ProductName,BinaryName | format-table
                }
                else
                {
                    "[-] No * Publisher Rules found"
                }
            }

            
            "`n    #######################"
            "    # PATH RULES          #"
            "    #######################"
            "[*] Checking for user writeable allowed paths"
            $UserAllowedWriteablePaths = Get-PALWriteableAllowedPaths
            if($UserAllowedWriteablePaths)
            {
                "[+] These userwriteable allowed paths was found:"
                $UserAllowedWriteablePaths
            }
            else
            {
                "[-] No userwriteable allowed paths was found"
            }

            "`n[*] Checking for missing ADS rules"
            ## ADS
            $MissingADSPaths = Get-PALMissingADSRules
            if($MissingADSPaths)
            {
                "[+] The following userwriteable allowed paths are missing ADS blocking rules:"
                $MissingADSPaths
            }
            else
            {
                "[-] All userwriteable allowed paths have ADS blocking rules"
            }
            
                        
            ## Deny rules that are configured wrong
            if($DenyPathRules)
            {
                $ExploitableDenyPathRules = @()

                ForEach($DPR in $DenyPathRules.RulesList)
                {
                    if(!($($DPR.RulePath) -match "\\\*$" -or $($DPR.RulePath) -match "\.\w{2,4}$" -or $($DPR.RulePath) -match ":\*"))
                    {
                        write-verbose "[+] Found misconfigured deny path rule - Missing asterix (*) - Rule has no effect"
                        $ExploitableDenyPathRules += $DPR
                    }
                }

                if($ExploitableDenyPathRules)
                {
                    "[+] Misconfigured deny rules - Missing asterix (*) - Rule has no effect:"
                    $ExploitableDenyPathRules | Select-Object ParentName,RulePath | Format-Table
                }
            }
            else{
                "[+] Did not find any specific deny rules"
            }

            #Rules that allow path for a single filename
            # *file.exe and *file.exe*
            "`n[*] Checking for *file.exe and *file.exe* allowed path rules"

            $ExploitableAllowedPathRules = @()
            foreach($section in $AllowPathRules)
            {
                foreach($sect in $section.RulesList)
                {   #*file.exe*" or "*file.exe"
                    if($sect.path -match "^\*\w+\.\w{2,4}\*$" -or $sect.path -match "^\*\w+\.\w{2,4}$")
                    {
                        write-verbose "[+] Found exploitable allowed path rule in section: $($sect.ParentName)"
                        $ExploitableAllowedPathRules += $sect
                    }
                }
            }

            if($ExploitableAllowedPathRules)
            {
                "[+] Allowed Rule paths that can potentially be exploited:"
                $ExploitableAllowedPathRules | Select-Object ParentName,RulePath | Format-Table
            }

            ## Missing folders
            "`n[*] Checking for missing files and folders that has allow rules"
            $MissingAllowedPaths = Get-PALMissingAllowedPaths
            if($MissingAllowedPaths)
            {
                "[+] Missing allowed paths found that can potentially be exploited:"
                $MissingAllowedPaths
            }

            if(!($OfflineXML))
            {
                # CLM bypass
                "`n[*] Checking for potential CLM bypass"
                $CLMInjectiblePaths = Get-PALWriteableAllowedPaths -RuleSection Script
                If($($CLMInjectiblePaths.count) -eq "0")
                {
                    "[-] No user writeable allowed paths found for CLM bypass"
                }
                else
                {
                    "[+] $($CLMInjectiblePaths.count) potential paths found that can be used for CLM bypass"
                    "[+] Use Invoke-PALCLMTempBypass to attempt to launch a full language mode PowerShell session"
                    $CLMInjectiblePaths
                }
            }

            "`n    #######################"
            "    # HASH RULES          #"
            "    #######################"
            ## Denied hash rules
            if($DenyHashRules)
            {
                ForEach($HR in $DenyHashRules)
                {
                    "[+] Found hash deny rule" 
                    "[+] - Add content to file and execute: copy /b blockedfile.exe+txtfile.txt newfile.txt"
                    $HR.RulesList | fl *
                }
            }
            else
            {
                "[-] Did not find any hash deny rules"
            }

        }
        Catch
        {
            write-error $_
        }
        Finally{}
    }
}